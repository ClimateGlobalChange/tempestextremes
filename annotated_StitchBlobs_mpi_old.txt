--------------------------------------------------------------------------------
Profile data file 'xtmemory_mpi_old_4.0.kcg' (creator: xtree-1)
--------------------------------------------------------------------------------
Profiled target:  ./bin/StitchBlobs_old --in_list ./test/ERA5_AR_test/ERA5_AR_files_short.txt --out_list ./test/ERA5_AR_test/ERA5_AR_SB_files_short.txt --min_overlap_prev 25.0 --max_overlap_prev 100.0 --min_overlap_next 25.0 --max_overlap_next 100.0 --latname latitude --lonname longitude --var AR_binary_tag (PID 566686)
Events recorded:  curB curBk totB totBk totFdB totFdBk
Events shown:     curB curBk totB totBk totFdB totFdBk
Event sort order: curB curBk totB totBk totFdB totFdBk
Thresholds:       99 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
curB             curBk        totB                   totBk               totFdB                 totFdBk             
--------------------------------------------------------------------------------
100,773 (100.0%) 725 (100.0%) 4,674,364,078 (100.0%) 68,125,197 (100.0%) 4,674,263,305 (100.0%) 68,124,472 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
curB             curBk        totB                   totBk                totFdB                 totFdBk               file:function
--------------------------------------------------------------------------------
100,773 (100.0%) 723 (99.72%) 2,895,737,422 (61.95%)  25,530,565 (37.48%) 2,685,651,703 (57.46%)  20,322,590 (29.83%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/StitchBlobs_old.cpp:main

--------------------------------------------------------------------------------
-- Auto-annotated source: /global/homes/h/hyvchen/tempestextremes/src/blobs/StitchBlobs_old.cpp
--------------------------------------------------------------------------------
curB            curBk        totB                   totBk              totFdB                 totFdBk             

-- line 234 ----------------------------------------
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Constructor that will read in std::vector< std::vector<Tag>> vecAllBlobTags and MPI communicator
     .            .                      .                  .                      .                   .           		///		It will also create the derived MPI_Datatype for Tag and commit it.
     .            .                      .                  .                      .                   .           		///	</summary>	
     .            .                      .                  .                      .                   .           		TagCollectiveOP(
     .            .                      .                  .                      .                   .           			MPI_Comm communicator, 
     .            .                      .                  .                      .                   .           			const std::vector< std::vector<Tag>> & vecAllBlobTags
     .            .                      .                  .                      .                   .           		) {
     0            0                 75,288 ( 0.00%)       740 ( 0.00%)             0                   0           			this->_vecAllBlobTags = vecAllBlobTags;
     .            .                      .                  .                      .                   .           			this->m_comm = communicator;
     .            .                      .                  .                      .                   .           			this->serializedFlag = 0;
     .            .                      .                  .                      .                   .           			int rank, size;
     .            .                      .                  .                      .                   .           			MPI_Comm_size(m_comm, &size);
     .            .                      .                  .                      .                   .           			MPI_Comm_rank(m_comm, &rank);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Create an MPI datatype for the Tag:
     .            .                      .                  .                      .                   .           			struct Tag sampleTag;
-- line 250 ----------------------------------------
-- line 258 ----------------------------------------
     .            .                      .                  .                      .                   .           			MPI_Get_address(&sampleTag.id, &Tag_displacements[0]);
     .            .                      .                  .                      .                   .           			MPI_Get_address(&sampleTag.time, &Tag_displacements[1]);
     .            .                      .                  .                      .                   .           			MPI_Get_address(&sampleTag.global_id, &Tag_displacements[2]);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			Tag_displacements[0] = MPI_Aint_diff(Tag_displacements[0], base_address);
     .            .                      .                  .                      .                   .           			Tag_displacements[1] = MPI_Aint_diff(Tag_displacements[1], base_address);
     .            .                      .                  .                      .                   .           			Tag_displacements[2] = MPI_Aint_diff(Tag_displacements[2], base_address);
     .            .                      .                  .                      .                   .           
     0            0                    176 ( 0.00%)         4 ( 0.00%)            32 ( 0.00%)          2 ( 0.00%)  			MPI_Type_create_struct(tagFieldsCount, Tag_block_lengths, Tag_displacements, Tag_typesig, &MPI_Tag_type);
     .            .                      .                  .                      .                   .           
     0            0                    256 ( 0.00%)         6 ( 0.00%)            96 ( 0.00%)          4 ( 0.00%)  			int result = MPI_Type_commit(&MPI_Tag_type);
     .            .                      .                  .                      .                   .           			if (result != MPI_SUCCESS) {
     .            .                      .                  .                      .                   .           				_EXCEPTION1("The MPI routine MPI_Type_commit(&MPI_Tag_type) failed (code %i)", result);
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Destructor.
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		~TagCollectiveOP(){
     0            0                      0                  0                    304 ( 0.00%)          4 ( 0.00%)  			MPI_Type_free(&MPI_Tag_type);			
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		The MPI gather process that will gather each local vecAllBlobTags to the processor 0.
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		void Gather() {
     .            .                      .                  .                      .                   .           			int rank, size;
     .            .                      .                  .                      .                   .           			MPI_Comm_size(m_comm, &size);
-- line 286 ----------------------------------------
-- line 295 ----------------------------------------
     .            .                      .                  .                      .                   .           				if ((rank & (int)std::round(std::pow(2,j))) != 0) {
     .            .                      .                  .                      .                   .           					
     .            .                      .                  .                      .                   .           					// Send to (world_rank ^ pow(2,j)
     .            .                      .                  .                      .                   .           					int destRank = rank ^ (int)round(std::pow(2,j));
     .            .                      .                  .                      .                   .           					if (destRank > size - 1) {
     .            .                      .                  .                      .                   .           						continue;
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           
     0            0                      4 ( 0.00%)         1 ( 0.00%)             0                   0           					MPI_Send (serialVecAllBlobTags.data(), serialVecAllBlobTags.size(), MPI_Tag_type, destRank, gather_tag, m_comm);
     .            .                      .                  .                      .                   .           					MPI_Send (serialVecAllBlobTags_index.data(), serialVecAllBlobTags_index.size(), MPI_INT, destRank, gather_tag_index, m_comm);
     .            .                      .                  .                      .                   .           					// Simply need to break the algorithm here (juest return, not Finalize())
     .            .                      .                  .                      .                   .           					return;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				} else {
     .            .                      .                  .                      .                   .           					// Receive from (world_rank ^ pow(2,j))
     .            .                      .                  .                      .                   .           					MPI_Status status;
-- line 311 ----------------------------------------
-- line 325 ----------------------------------------
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					// Pack the receive Tag into the local serialVecAllBlobTags.
     .            .                      .                  .                      .                   .           					for (auto recvTag : recvTags) {
     .            .                      .                  .                      .                   .           						serialVecAllBlobTags.push_back(recvTag);
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					MPI_Status status_index;
     .            .                      .                  .                      .                   .           					int recvCount_index;
     0            0                  1,476 ( 0.00%)         1 ( 0.00%)             0                   0           					MPI_Probe(sourceRank, gather_tag_index,  m_comm, &status_index);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					MPI_Get_count( &status_index, MPI_INT, &recvCount_index);					 
     .            .                      .                  .                      .                   .           					std::vector<int> recvTagsIndx;
     .            .                      .                  .                      .                   .           					recvTagsIndx.resize(recvCount_index);
     0            0                      0                  0                  1,476 ( 0.00%)          1 ( 0.00%)  					MPI_Recv(recvTagsIndx.data(), recvCount_index, MPI_INT, sourceRank, gather_tag_index, m_comm, &status_index);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					
     .            .                      .                  .                      .                   .           					// Update the received index and then Pack the receive Tag index into the
     .            .                      .                  .                      .                   .           					// local serialVecAllBlobTags_index.
     .            .                      .                  .                      .                   .           					// Example:
     .            .                      .                  .                      .                   .           					// Initial:
     .            .                      .                  .                      .                   .           					// P0 serialVecAllBlobTags: 0, 3, 5, 7;   P1 serialVecAllBlobTags: 0, 3, 5, 7
     .            .                      .                  .                      .                   .           					// After Gather:
-- line 346 ----------------------------------------
-- line 413 ----------------------------------------
     .            .                      .                  .                      .                   .           			vecScatterCounts.resize(size);
     .            .                      .                  .                      .                   .           			vecScatterCounts_index.resize(size);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			if (rank == 0) {				
     .            .                      .                  .                      .                   .           				MPI_Gather(&curSize, 1, MPI_INT, vecScatterCounts.data(), 1, MPI_INT, 0, m_comm);
     .            .                      .                  .                      .                   .           				MPI_Gather(&localSize, 1, MPI_INT, vecScatterCounts_index.data(), 1, MPI_INT, 0, m_comm);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			} else {
     0            0                  9,948 ( 0.00%)       116 ( 0.00%)         8,424 ( 0.00%)        118 ( 0.00%)  				this->_vecAllBlobTags = vecAllBlobTags;
     0            0                     12 ( 0.00%)         2 ( 0.00%)             8 ( 0.00%)          1 ( 0.00%)  				MPI_Gather(&curSize, 1, MPI_INT, NULL, 0, MPI_INT, 0,m_comm);
     0            0                      8 ( 0.00%)         1 ( 0.00%)            12 ( 0.00%)          2 ( 0.00%)  				MPI_Gather(&localSize, 1, MPI_INT, NULL, 0, MPI_INT, 0,m_comm);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Scatter the vecAllBlobs to each processor
     .            .                      .                  .                      .                   .           		///		The displacement is calculated based on the vecGlobalTimes
-- line 431 ----------------------------------------
-- line 551 ----------------------------------------
     .            .                      .                  .                      .                   .           		void UpdateTime(){
     .            .                      .                  .                      .                   .           			int err, rank, size;
     .            .                      .                  .                      .                   .           			MPI_Comm_size(m_comm, &size);
     .            .                      .                  .                      .                   .           			MPI_Comm_rank(m_comm, &rank);
     .            .                      .                  .                      .                   .           			this->gloablTimeIndx.resize(size);
     .            .                      .                  .                      .                   .           			int localEndTime = _vecAllBlobTags.size();
     .            .                      .                  .                      .                   .           			int preFixTime;
     .            .                      .                  .                      .                   .           			
     0            0                     12 ( 0.00%)         3 ( 0.00%)            16 ( 0.00%)          4 ( 0.00%)  			MPI_Scan(&localEndTime, &preFixTime, 1, MPI_INT, MPI_SUM, m_comm);
     .            .                      .                  .                      .                   .           			this->gloablTimeIndx[rank].resize(2);
     .            .                      .                  .                      .                   .           			this->gloablTimeIndx[rank][0] = preFixTime - localEndTime;
     .            .                      .                  .                      .                   .           			this->gloablTimeIndx[rank][1] = preFixTime;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			//Update Tag.time
     .            .                      .                  .                      .                   .           			int globalTime = this->gloablTimeIndx[rank][0];
     .            .                      .                  .                      .                   .           			for (int i = 0; i < _vecAllBlobTags.size(); i++) {
     .            .                      .                  .                      .                   .           				_ASSERT(globalTime < gloablTimeIndx[rank][1]);
-- line 567 ----------------------------------------
-- line 609 ----------------------------------------
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Construct the Operator with vecAllBlobTags
     .            .                      .                  .                      .                   .           		///		It will contruct the this->m_comm and this->_vecAllBlobTags based on the input communicator and vecAllBlobTags
     .            .                      .                  .                      .                   .           		///		And also construct the derived MPI_Datatype for Tag and commit it.
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		TagExchangeOP(MPI_Comm communicator, 
     .            .                      .                  .                      .                   .           					  const std::vector< std::vector<Tag> > & vecAllBlobTags){
     0            0                 37,512 ( 0.00%)       369 ( 0.00%)             0                   0           			this->_vecAllBlobTags = vecAllBlobTags;
     .            .                      .                  .                      .                   .           			this->m_comm = communicator;
     .            .                      .                  .                      .                   .           			//Initialize the size for the sendTags:
     .            .                      .                  .                      .                   .           			sendTags.resize(2);
     .            .                      .                  .                      .                   .           			sendTags[0].resize(_vecAllBlobTags[0].size());
     .            .                      .                  .                      .                   .           			sendTags[1].resize(_vecAllBlobTags[_vecAllBlobTags.size()-1].size());
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			//Initialize the size for the recvTags:
     .            .                      .                  .                      .                   .           			recvTags.resize(2);
-- line 625 ----------------------------------------
-- line 634 ----------------------------------------
     .            .                      .                  .                      .                   .           			MPI_Aint base_address;
     .            .                      .                  .                      .                   .           			MPI_Get_address(&sampleTag, &base_address);
     .            .                      .                  .                      .                   .           			MPI_Get_address(&sampleTag.id, &Tag_displacements[0]);
     .            .                      .                  .                      .                   .           			MPI_Get_address(&sampleTag.time, &Tag_displacements[1]);
     .            .                      .                  .                      .                   .           			MPI_Get_address(&sampleTag.global_id, &Tag_displacements[2]);
     .            .                      .                  .                      .                   .           			Tag_displacements[0] = MPI_Aint_diff(Tag_displacements[0], base_address);
     .            .                      .                  .                      .                   .           			Tag_displacements[1] = MPI_Aint_diff(Tag_displacements[1], base_address);
     .            .                      .                  .                      .                   .           			Tag_displacements[2] = MPI_Aint_diff(Tag_displacements[2], base_address);
     0            0                     88 ( 0.00%)         2 ( 0.00%)            16 ( 0.00%)          1 ( 0.00%)  			MPI_Type_create_struct(tagFieldsCount, Tag_block_lengths, Tag_displacements, Tag_typesig, &MPI_Tag_type);
     .            .                      .                  .                      .                   .           
     0            0                    128 ( 0.00%)         3 ( 0.00%)            48 ( 0.00%)          2 ( 0.00%)  			int result = MPI_Type_commit(&MPI_Tag_type);
     .            .                      .                  .                      .                   .           			if (result != MPI_SUCCESS) {
     .            .                      .                  .                      .                   .           				_EXCEPTION1("The MPI routine MPI_Type_commit(&MPI_Tag_type) failed (code %i)", result);
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Destructor
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		~TagExchangeOP(){
     0            0                      0                  0                    152 ( 0.00%)          2 ( 0.00%)  			MPI_Type_free(&MPI_Tag_type);
     .            .                      .                  .                      .                   .           			MPIrequests.clear();
     .            .                      .                  .                      .                   .           			MPIstatuses.clear();
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Return the original unexchanged vecAllBlobTags
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		std::vector< std::vector<Tag> > GetOriginalVecAllBlobTags(){
     0            0                 75,024 ( 0.00%)       738 ( 0.00%)             0                   0           			return _vecAllBlobTags;
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Start the exchange process.
     .            .                      .                  .                      .                   .           		/// 	this function is non-blocking and the data values in the TagExchangeOP should not be modified
     .            .                      .                  .                      .                   .           		/// 	The exchange values are not guaranteed to be current when this function returns and need to be used with the EndExchange()
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		void StartExchange() {
-- line 672 ----------------------------------------
-- line 759 ----------------------------------------
     .            .                      .                  .                      .                   .           					MPI_Status status;
     .            .                      .                  .                      .                   .           					MPI_Request request;
     .            .                      .                  .                      .                   .           					int recvCount;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					// Use a non-blocking probe to know the incoming data size
     .            .                      .                  .                      .                   .           					int flag = 0;
     .            .                      .                  .                      .                   .           					while(!flag)
     .            .                      .                  .                      .                   .           					{
     0            0                    216 ( 0.00%)         2 ( 0.00%)             0                   0           						MPI_Iprobe( sourceRank, tag, m_comm, &flag, &status );
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           					MPI_Get_count( &status, MPI_Tag_type, &recvCount );
     .            .                      .                  .                      .                   .           					recvTags[dir].resize(recvCount);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					int result =
     .            .                      .                  .                      .                   .           						MPI_Irecv(recvTags[dir].data(), recvTags[dir].size(), MPI_Tag_type,
     0            0                      0                  0                    216 ( 0.00%)          2 ( 0.00%)  							sourceRank, tag, m_comm, &request);
     .            .                      .                  .                      .                   .           					if (result != MPI_SUCCESS) {
     .            .                      .                  .                      .                   .           						_EXCEPTION1("The MPI routine MPI_Isend failed (code %i)", result);
     .            .                      .                  .                      .                   .           					}
     0            0                     12 ( 0.00%)         2 ( 0.00%)             4 ( 0.00%)          1 ( 0.00%)  					MPIrequests.emplace_back(std::move(request));
     .            .                      .                  .                      .                   .           					MPIstatuses.push_back(MPI_Status());
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		End the exchange process.
     .            .                      .                  .                      .                   .           		// 		this function is blocking until:
-- line 786 ----------------------------------------
-- line 818 ----------------------------------------
     .            .                      .                  .                      .                   .           					exchangedvecAllBlobTags[0] = recvTags[0];
     .            .                      .                  .                      .                   .           					for (int i = 1; i < exchangedvecAllBlobTags.size(); i++) {
     .            .                      .                  .                      .                   .           						exchangedvecAllBlobTags[i] = _vecAllBlobTags[i -1 ];
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				} else {	
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					exchangedvecAllBlobTags.resize(_vecAllBlobTags.size() + 2);
     0            0                    108 ( 0.00%)         1 ( 0.00%)             0                   0           					exchangedvecAllBlobTags[0] = recvTags[0];
     .            .                      .                  .                      .                   .           					for (int i = 1; i < exchangedvecAllBlobTags.size() - 1; i++) {
     0            0                 28,680 ( 0.00%)       368 ( 0.00%)             0                   0           						exchangedvecAllBlobTags[i] = _vecAllBlobTags[i-1];
     .            .                      .                  .                      .                   .           					}
     0            0                    108 ( 0.00%)         1 ( 0.00%)             0                   0           					exchangedvecAllBlobTags[exchangedvecAllBlobTags.size() - 1] = recvTags[1];
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			} else {
     .            .                      .                  .                      .                   .           				exchangedvecAllBlobTags = _vecAllBlobTags;
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Return the exchanged vecAllBlobTags
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		std::vector< std::vector<Tag>> GetExchangedVecAllBlobTags(){
     0            0                 37,776 ( 0.00%)       371 ( 0.00%)             0                   0           			return this->exchangedvecAllBlobTags;
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           };
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           ///	<summary>
     .            .                      .                  .                      .                   .           ///		Class for exchanging vecAllBlobBoxesDeg among processors
     .            .                      .                  .                      .                   .           ///	</summary>
     .            .                      .                  .                      .                   .           class BlobBoxesDegExchangeOP {
-- line 851 ----------------------------------------
-- line 907 ----------------------------------------
     .            .                      .                  .                      .                   .           	public:
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Construct the Operator with vecAllBlobBoxesDeg
     .            .                      .                  .                      .                   .           		///		It will contruct the this->m_comm and this->_vecAllBlobBoxesDeg based on the input communicator and vecAllBlobBoxesDeg
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		BlobBoxesDegExchangeOP(MPI_Comm communicator, 
     .            .                      .                  .                      .                   .           							   const std::vector< std::vector< LatLonBox<double> > > & vecAllBlobBoxesDeg){
     0            0                123,552 ( 0.00%)       369 ( 0.00%)             0                   0           			this->_vecAllBlobBoxesDeg = vecAllBlobBoxesDeg;
     .            .                      .                  .                      .                   .           			this->m_comm = communicator;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		//########################### Notes for  derived MPI datatype of the LatLonBox<double>(Hongyu Chen) ############################################################################ 
     .            .                      .                  .                      .                   .           		//1.  "Because vector<bool> holds bits instead of bools, it can't return a bool& from its indexing operator or iterator dereference" (src: https://isocpp.org/blog/2012/11/on-vectorbool)
     .            .                      .                  .                      .                   .           		//    Therefore, creating the userdefined datatype for LatLonBox<double> and then use vector.data() to send/recv like TagExhangeOP is not working here
     .            .                      .                  .                      .                   .           		//2.  Now we're using the MPI_BYTE to manually calculate the send/recv buffer size in byte here, which is working currently
     .            .                      .                  .                      .                   .           		//3.  If the program breaks again here, please consider going to the BlobUtilities.h and modify the constructer at line 232 and line 236 according to the description there.
     .            .                      .                  .                      .                   .           
-- line 923 ----------------------------------------
-- line 969 ----------------------------------------
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		void StartExchange() {
     .            .                      .                  .                      .                   .           			int rank, size;
     .            .                      .                  .                      .                   .           			MPI_Comm_size(m_comm, &size);
     .            .                      .                  .                      .                   .           			MPI_Comm_rank(m_comm, &rank);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			//----------------------Send data first----------------------
     .            .                      .                  .                      .                   .           			// Pack data into the send buffer
     0            0                    384 ( 0.00%)         1 ( 0.00%)             0                   0           			sendBlobBoxesDeg[0] = _vecAllBlobBoxesDeg[0];
     0            0                    432 ( 0.00%)         1 ( 0.00%)             0                   0           			sendBlobBoxesDeg[1] = _vecAllBlobBoxesDeg[_vecAllBlobBoxesDeg.size()-1];
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Send data
     .            .                      .                  .                      .                   .           			for (auto dir: {DIR_LEFT, DIR_RIGHT}) {
     .            .                      .                  .                      .                   .           				int destRank;//Destination Rank
     .            .                      .                  .                      .                   .           				if (dir == DIR_LEFT) {
     .            .                      .                  .                      .                   .           					// Sending Data to the left
     .            .                      .                  .                      .                   .           					if (rank == 0) {
     .            .                      .                  .                      .                   .           						// Rank 0 Do Nothing
-- line 986 ----------------------------------------
-- line 1042 ----------------------------------------
     .            .                      .                  .                      .                   .           				if (rank % 2 == 0) {
     .            .                      .                  .                      .                   .           					MPI_Status status;
     .            .                      .                  .                      .                   .           					MPI_Request request;
     .            .                      .                  .                      .                   .           					int recvCount;
     .            .                      .                  .                      .                   .           					// Use a non-blocking probe to know the incoming data size
     .            .                      .                  .                      .                   .           					int flag = 0;
     .            .                      .                  .                      .                   .           					while(!flag)
     .            .                      .                  .                      .                   .           					{
     0            0                  1,124 ( 0.00%)         3 ( 0.00%)             0                   0           						MPI_Iprobe( sourceRank, tag, m_comm, &flag, &status );
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           					MPI_Get_count( &status, MPI_BYTE, &recvCount );	
     .            .                      .                  .                      .                   .           					_ASSERT(recvCount % sizeof(LatLonBox<double>) == 0);			
     .            .                      .                  .                      .                   .           					recvBlobBoxesDeg[dir].resize(recvCount / sizeof(LatLonBox<double>));			
     0            0                      0                  0                    864 ( 0.00%)          2 ( 0.00%)  					MPI_Irecv(recvBlobBoxesDeg[dir].data(), recvCount,MPI_BYTE,
     .            .                      .                  .                      .                   .           							sourceRank, tag, m_comm, &request);
     0            0                     12 ( 0.00%)         2 ( 0.00%)             4 ( 0.00%)          1 ( 0.00%)  					MPIrequests.emplace_back(std::move(request));
     .            .                      .                  .                      .                   .           					MPIstatuses.push_back(MPI_Status());
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		End the exchange process.
     .            .                      .                  .                      .                   .           		// 		this function is blocking until:
-- line 1065 ----------------------------------------
-- line 1094 ----------------------------------------
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				} else if (rank == size - 1) {
     .            .                      .                  .                      .                   .           					exchangedvecAllBlobBoxesDeg.emplace_back(std::move(recvBlobBoxesDeg[0]));
     .            .                      .                  .                      .                   .           					for (int i = 0; i < _vecAllBlobBoxesDeg.size(); i++) {
     .            .                      .                  .                      .                   .           						exchangedvecAllBlobBoxesDeg.emplace_back(std::move(_vecAllBlobBoxesDeg[i]));
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				} else {
     0            0                     24 ( 0.00%)         1 ( 0.00%)             0                   0           					exchangedvecAllBlobBoxesDeg.emplace_back(std::move(recvBlobBoxesDeg[0]));
     .            .                      .                  .                      .                   .           					for (int i = 0; i < _vecAllBlobBoxesDeg.size(); i++) {
     0            0                 24,528 ( 0.00%)         9 ( 0.00%)        12,264 ( 0.00%)          9 ( 0.00%)  						exchangedvecAllBlobBoxesDeg.emplace_back(std::move(_vecAllBlobBoxesDeg[i]));
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           					exchangedvecAllBlobBoxesDeg.emplace_back(std::move(recvBlobBoxesDeg[1]));
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			} else {
     .            .                      .                  .                      .                   .           				exchangedvecAllBlobBoxesDeg = _vecAllBlobBoxesDeg;
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Return the exchanged vecAllBlobTags
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		std::vector< std::vector< LatLonBox<double> > > GetExchangedVecAllBlobBoxesDeg(){
     0            0                124,464 ( 0.00%)       371 ( 0.00%)             0                   0           			return this->exchangedvecAllBlobBoxesDeg;
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           };
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           #endif 
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           ///////////////////////////////////////////////////////////////////////////////
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           // Set of indicator locations stored as grid indices
-- line 1128 ----------------------------------------
-- line 1276 ----------------------------------------
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	public:
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Construct the Operator with BlobsExchangeOp
     .            .                      .                  .                      .                   .           		///		It will contruct the this->m_comm and this->_vecAllBlobs based on the input communicator and vecAllBlobs	
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		BlobsExchangeOp(MPI_Comm communicator, 
     .            .                      .                  .                      .                   .           						const std::vector< std::vector<IndicatorSet> > & vecAllBlobs){
     0            0            227,417,112 ( 4.87%) 5,682,708 ( 8.34%)             0                   0           			this->_vecAllBlobs = vecAllBlobs;
     .            .                      .                  .                      .                   .           			this->m_comm = communicator;
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Destructor for BlobsExchangeOp
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		~BlobsExchangeOp(){
-- line 1292 ----------------------------------------
-- line 1400 ----------------------------------------
     .            .                      .                  .                      .                   .           					MPI_Status status;
     .            .                      .                  .                      .                   .           					MPI_Request request;
     .            .                      .                  .                      .                   .           					int recvCount;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					// Use a non-blocking probe to know the incoming data size
     .            .                      .                  .                      .                   .           					int flag = 0;
     .            .                      .                  .                      .                   .           					while(!flag)
     .            .                      .                  .                      .                   .           					{
     0            0                     40 ( 0.00%)         1 ( 0.00%)             0                   0           						MPI_Iprobe( sourceRank, blob_tag, m_comm, &flag, &status );
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           					MPI_Get_count( &status, MPI_INT, &recvCount );
     .            .                      .                  .                      .                   .           					recvBlobs[dir].resize(recvCount);
     .            .                      .                  .                      .                   .           					MPI_Irecv(recvBlobs[dir].data(), recvBlobs[dir].size(), MPI_INT,
     .            .                      .                  .                      .                   .           							sourceRank, blob_tag, m_comm, &request);
     0            0                     20 ( 0.00%)         2 ( 0.00%)             8 ( 0.00%)          1 ( 0.00%)  					MPIrequests.emplace_back(std::move(request));
     .            .                      .                  .                      .                   .           					MPIstatuses.push_back(MPI_Status());
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					//----------------------Receive the index info for the Blobs----------------------
     .            .                      .                  .                      .                   .           					MPI_Status indxStatus;
     .            .                      .                  .                      .                   .           					MPI_Request indxRequest;
     .            .                      .                  .                      .                   .           					int indxRecvCount;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           					// Use a non-blocking probe to know the incoming data size
     .            .                      .                  .                      .                   .           					int indxFlag = 0;
     .            .                      .                  .                      .                   .           					while(!indxFlag)
     .            .                      .                  .                      .                   .           					{
     0            0                     40 ( 0.00%)         1 ( 0.00%)             0                   0           						MPI_Iprobe( sourceRank, indx_tag, m_comm, &indxFlag, &indxStatus);
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           					MPI_Get_count( &indxStatus, MPI_INT, &indxRecvCount);
     .            .                      .                  .                      .                   .           					recvBlobsIndx[dir].resize(indxRecvCount);
     0            0                      0                  0                     80 ( 0.00%)          2 ( 0.00%)  					MPI_Irecv(recvBlobsIndx[dir].data(), recvBlobsIndx[dir].size(), MPI_INT,
     .            .                      .                  .                      .                   .           							sourceRank, indx_tag, m_comm, &indxRequest);
     0            0                      8 ( 0.00%)         1 ( 0.00%)             4 ( 0.00%)          1 ( 0.00%)  					MPIrequests.emplace_back(std::move(indxRequest));
     .            .                      .                  .                      .                   .           					MPIstatuses.push_back(MPI_Status());
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		}
-- line 1440 ----------------------------------------
-- line 1472 ----------------------------------------
     .            .                      .                  .                      .                   .           					exchangedVecAllBlobs[exchangedVecAllBlobs.size() - 1] = recvBlobsUnserial[1];
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				} else if (rank == size - 1) {
     .            .                      .                  .                      .                   .           					exchangedVecAllBlobs[0] = recvBlobsUnserial[0];
     .            .                      .                  .                      .                   .           					for (int i = 1; i < exchangedVecAllBlobs.size(); i++) {
     .            .                      .                  .                      .                   .           						exchangedVecAllBlobs[i] = _vecAllBlobs[i-1];
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           				} else {
     0            0                869,072 ( 0.02%)    21,717 ( 0.03%)             0                   0           					exchangedVecAllBlobs[0] = recvBlobsUnserial[0];				
     .            .                      .                  .                      .                   .           					for (int i = 1; i < exchangedVecAllBlobs.size() - 1; i++) {
     0            0            227,408,280 ( 4.87%) 5,682,707 ( 8.34%)             0                   0           						exchangedVecAllBlobs[i] = _vecAllBlobs[i-1];
     .            .                      .                  .                      .                   .           					}
     0            0                817,592 ( 0.02%)    20,430 ( 0.03%)             0                   0           					exchangedVecAllBlobs[exchangedVecAllBlobs.size() - 1] = recvBlobsUnserial[1];
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           			} else {
     .            .                      .                  .                      .                   .           				// For odd number processors, nothing is modified.
     .            .                      .                  .                      .                   .           				exchangedVecAllBlobs = _vecAllBlobs;
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Return the exchanged VecAllBlobs
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		std::vector<std::vector<IndicatorSet>> GetExchangedVecAllBlobs(){
     0            0            229,103,824 ( 4.90%) 5,724,855 ( 8.40%)             0                   0           			return this->exchangedVecAllBlobs;
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Return the unexchanged VecAllBlobs
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		std::vector<std::vector<IndicatorSet>> GetOriginalVecAllBlobs(){
     0            0            227,417,112 ( 4.87%) 5,682,708 ( 8.34%)             0                   0           			return this->_vecAllBlobs;
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           };
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           ///	<summary>
     .            .                      .                  .                      .                   .           ///		A Class used for exchanging vecGlobalTimes between processors
     .            .                      .                  .                      .                   .           ///		This class will update the local global time accordingly after the exchange process.
     .            .                      .                  .                      .                   .           ///	</summary>	
-- line 1511 ----------------------------------------
-- line 1571 ----------------------------------------
     .            .                      .                  .                      .                   .           		///		It will contruct the this->m_comm this->_vecGlobalTimes this->fileLowerBound and this->fileUpperBound based on the input.
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		GlobalTimesExchangeOp(
     .            .                      .                  .                      .                   .           			MPI_Comm communicator, 
     .            .                      .                  .                      .                   .           			const std::vector< std::vector<Time> > & vecGlobalTimes, 
     .            .                      .                  .                      .                   .           			const int & processorResponsibalForFile_LB, 
     .            .                      .                  .                      .                   .           			const int & processorResponsibalForFile_UB
     .            .                      .                  .                      .                   .           		) {
     0            0                 10,592 ( 0.00%)         4 ( 0.00%)             0                   0           			this->_vecGlobalTimes = vecGlobalTimes;
     .            .                      .                  .                      .                   .           			this->m_comm = communicator;
     .            .                      .                  .                      .                   .           			this->fileLowerBound = processorResponsibalForFile_LB;
     .            .                      .                  .                      .                   .           			this->fileUpperBound = processorResponsibalForFile_UB;
     .            .                      .                  .                      .                   .           			sendTimes.resize(2);
     .            .                      .                  .                      .                   .           			recvTimes.resize(2);
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
-- line 1587 ----------------------------------------
-- line 1670 ----------------------------------------
     .            .                      .                  .                      .                   .           				if (rank % 2 == 0) {
     .            .                      .                  .                      .                   .           					MPI_Status status;
     .            .                      .                  .                      .                   .           					MPI_Request request;
     .            .                      .                  .                      .                   .           					int recvCount;
     .            .                      .                  .                      .                   .           					// Use a non-blocking probe to know the incoming data size
     .            .                      .                  .                      .                   .           					int flag = 0;
     .            .                      .                  .                      .                   .           					while(!flag)
     .            .                      .                  .                      .                   .           					{
     0            0                     60 ( 0.00%)         3 ( 0.00%)             0                   0           						MPI_Iprobe( sourceRank, tag, m_comm, &flag, &status );
     .            .                      .                  .                      .                   .           					}
     .            .                      .                  .                      .                   .           					MPI_Get_count( &status, MPI_BYTE, &recvCount );						
     0            0                      0                  0                     56 ( 0.00%)          2 ( 0.00%)  					MPI_Irecv(&recvTimes[dir], recvCount, MPI_BYTE,
     .            .                      .                  .                      .                   .           							sourceRank, tag, m_comm, &request);
     0            0                     12 ( 0.00%)         2 ( 0.00%)             4 ( 0.00%)          1 ( 0.00%)  					MPIrequests.emplace_back(std::move(request));
     .            .                      .                  .                      .                   .           					MPIstatuses.push_back(MPI_Status());
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		End the exchange process.
     .            .                      .                  .                      .                   .           		// 		this function is blocking until:
-- line 1691 ----------------------------------------
-- line 1706 ----------------------------------------
     .            .                      .                  .                      .                   .           			int rank, size;
     .            .                      .                  .                      .                   .           			MPI_Comm_size(m_comm, &size);
     .            .                      .                  .                      .                   .           			MPI_Comm_rank(m_comm, &rank);
     .            .                      .                  .                      .                   .           			exchangedVecGlobalTimes.resize(_vecGlobalTimes.size());
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Pack the data into the vecGlobalTimes 
     .            .                      .                  .                      .                   .           			// Only the even number processors need to pack the data
     .            .                      .                  .                      .                   .           			if (rank % 2 == 0) {
     0            0                 10,304 ( 0.00%)         3 ( 0.00%)             0                   0           				exchangedVecGlobalTimes = _vecGlobalTimes;
     .            .                      .                  .                      .                   .           								
     .            .                      .                  .                      .                   .           				if (rank == 0) {
     .            .                      .                  .                      .                   .           					// Put the Time received from the left at the [fileUpperBound][end] position
     .            .                      .                  .                      .                   .           										
     .            .                      .                  .                      .                   .           					exchangedVecGlobalTimes[fileUpperBound - 1].push_back(recvTimes[1]);;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				} else if (rank == size - 1) {
     .            .                      .                  .                      .                   .           					// Put the Time received from the left at the [0][0] position
-- line 1722 ----------------------------------------
-- line 1744 ----------------------------------------
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Return the exchanged vecGlobalTimes
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		std::vector< std::vector<Time> >  GetExchangedVecGlobalTimes(){
     0            0                 10,648 ( 0.00%)         4 ( 0.00%)             0                   0           			return this->exchangedVecGlobalTimes;
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		///	<summary>
     .            .                      .                  .                      .                   .           		///		Return the unexchanged vecGlobalTimes
     .            .                      .                  .                      .                   .           		///	</summary>
     .            .                      .                  .                      .                   .           		std::vector< std::vector<Time> >  GetUnExchangedVecGlobalTimes(){
     0            0                 10,592 ( 0.00%)         4 ( 0.00%)             0                   0           			return this->_vecGlobalTimes;
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           };
     .            .                      .                  .                      .                   .           #endif 
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           // Array of equivalent tags
     .            .                      .                  .                      .                   .           typedef std::multimap<Tag, Tag> MapGraph;
     .            .                      .                  .                      .                   .           typedef MapGraph::const_iterator MapGraphConstIterator;
     .            .                      .                  .                      .                   .           typedef MapGraph::iterator MapGraphIterator;
-- line 1767 ----------------------------------------
-- line 2384 ----------------------------------------
     .            .                      .                  .                      .                   .           	// from input file, it will also write the result of
     .            .                      .                  .                      .                   .           	// 1979/01/01/00~1979/01/31/23 to the output file.
     .            .                      .                  .                      .                   .           	//########################### End HPC Notes (Hongyu Chen) ##################
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           int main(int argc, char** argv) {
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           #if defined(TEMPEST_MPIOMP)
     .            .                      .                  .                      .                   .           		// Initialize MPI
97,279 (96.53%) 614 (84.69%)     1,747,150 ( 0.04%)       750 ( 0.00%)        38,471 ( 0.00%)         85 ( 0.00%)  		int result = MPI_Init(&argc, &argv);
     .            .                      .                  .                      .                   .           		if (result != MPI_SUCCESS) {
     .            .                      .                  .                      .                   .           			_EXCEPTION1("The MPI routine MPI_Init failed (code %i)", result);
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           #endif
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	NcError error(NcError::silent_nonfatal);
     .            .                      .                  .                      .                   .           
-- line 2400 ----------------------------------------
-- line 2489 ----------------------------------------
     .            .                      .                  .                      .                   .           	// Time variable units
     .            .                      .                  .                      .                   .           	std::string strOutTimeUnits;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Verbose output
     .            .                      .                  .                      .                   .           	bool fVerbose;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Parse the command line
     .            .                      .                  .                      .                   .           	BeginCommandLine()
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strInputFile, "in", "");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strInputFileList, "in_list", "");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strConnectivity, "in_connect", "");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineBool(fDiagonalConnectivity, "diag_connect");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strOutputFile, "out", "");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strOutputFileList, "out_list", "");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strVariable, "var", "binary_tag");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strOutputVariable, "outvar", "object_id");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineInt(nMinBlobSize, "minsize", 1);
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strMinTime, "mintime", "1");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineBool(fTagOnly, "tagonly");
     0            0                    153 ( 0.00%)         4 ( 0.00%)            17 ( 0.00%)          1 ( 0.00%)  		CommandLineDoubleD(dMinPercentOverlapPrev, "min_overlap_prev", 0.0, "(%)")
     0            0                    153 ( 0.00%)         4 ( 0.00%)            17 ( 0.00%)          1 ( 0.00%)  		CommandLineDoubleD(dMaxPercentOverlapPrev, "max_overlap_prev", 100.0, "(%)")
     0            0                    153 ( 0.00%)         4 ( 0.00%)            17 ( 0.00%)          1 ( 0.00%)  		CommandLineDoubleD(dMinPercentOverlapNext, "min_overlap_next", 0.0, "(%)")
     0            0                    153 ( 0.00%)         4 ( 0.00%)            17 ( 0.00%)          1 ( 0.00%)  		CommandLineDoubleD(dMaxPercentOverlapNext, "max_overlap_next", 100.0, "(%)")
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineDouble(dMergeDistDeg, "merge_dist", 0.0); 
     0            0                    203 ( 0.00%)         5 ( 0.00%)            28 ( 0.00%)          1 ( 0.00%)  		CommandLineStringD(strRestrictRegion, "restrict_region", "", "(lat0,lat1,lon0,lon1,count)");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineBool(fRegional, "regional");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineDouble(dMinLatDeg, "minlat", -90.0);
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineDouble(dMaxLatDeg, "maxlat", 90.0);
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineDouble(dMinLonDeg, "minlon", 0.0);
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineDouble(dMaxLonDeg, "maxlon", 360.0);
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineBool(fFlatten, "flatten");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strLatitudeName, "latname","lat");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strLongitudeName, "lonname","lon");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strOutTimeUnits,"outtimeunits","");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineString(strThresholdCmd, "thresholdcmd", "");
     0            0                     88 ( 0.00%)         1 ( 0.00%)             0                   0           		CommandLineBool(fVerbose, "verbose");
     .            .                      .                  .                      .                   .           
     0            0                     91 ( 0.00%)         2 ( 0.00%)             0                   0           		ParseCommandLine(argc, argv);
     0            0                      0                  0                  2,647 ( 0.00%)         34 ( 0.00%)  	EndCommandLine(argv)
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	AnnounceBanner();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Create Variable registry
     0            0                  1,792 ( 0.00%)        32 ( 0.00%)     4,155,112 ( 0.09%)         36 ( 0.00%)  	VariableRegistry varreg;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Check input
     .            .                      .                  .                      .                   .           	if ((strInputFile == "") && (strInputFileList == "")) {
     .            .                      .                  .                      .                   .           		_EXCEPTIONT("No input file (--in) or (--in_list) specified");
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           	if ((strInputFile != "") && (strInputFileList != "")) {
     .            .                      .                  .                      .                   .           		_EXCEPTIONT("Only one of input file (--in) or (--in_list) allowed");
     .            .                      .                  .                      .                   .           	}
-- line 2540 ----------------------------------------
-- line 2548 ----------------------------------------
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Check variable
     .            .                      .                  .                      .                   .           	if (strVariable == "") {
     .            .                      .                  .                      .                   .           		_EXCEPTIONT("No variable name (--var) specified");
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Register variable
     0            0                    248 ( 0.00%)         2 ( 0.00%)             0                   0           	int varix = varreg.FindOrRegister(strVariable);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Check output variable
     .            .                      .                  .                      .                   .           	if (strOutputVariable.length() == 0) {
     .            .                      .                  .                      .                   .           		strOutputVariable = strVariable + "tag";
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Input file list
     .            .                      .                  .                      .                   .           	FilenameList vecInputFiles;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	if (strInputFile != "") {
     .            .                      .                  .                      .                   .           		vecInputFiles.push_back(strInputFile);
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           	if (strInputFileList != "") {
     0            0                 11,112 ( 0.00%)        20 ( 0.00%)         9,256 ( 0.00%)          7 ( 0.00%)  		vecInputFiles.FromFile(strInputFileList, false);
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	int nFiles = vecInputFiles.size();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Output file list
     .            .                      .                  .                      .                   .           	FilenameList vecOutputFiles;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	if (strOutputFile != "") {
     .            .                      .                  .                      .                   .           		vecOutputFiles.push_back(strOutputFile);
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           	if (strOutputFileList != "") {
     0            0                 11,242 ( 0.00%)        20 ( 0.00%)         9,266 ( 0.00%)          7 ( 0.00%)  		vecOutputFiles.FromFile(strOutputFileList, false);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		if (vecOutputFiles.size() != vecInputFiles.size()) {
     .            .                      .                  .                      .                   .           			_EXCEPTION2("Mismatch in number of rows of --in_list (%lu) and --out_list (%lu)",
     .            .                      .                  .                      .                   .           				vecInputFiles.size(), vecOutputFiles.size());
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Parse --mintime
-- line 2590 ----------------------------------------
-- line 2685 ----------------------------------------
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		AnnounceEndBlock("Done");
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Define the SimpleGrid
     0            0                      0                  0             66,447,376 ( 1.42%)  1,038,245 ( 1.52%)  	SimpleGrid grid;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Check for connectivity file
     .            .                      .                  .                      .                   .           	if (strConnectivity != "") {
     .            .                      .                  .                      .                   .           		AnnounceStartBlock("Generating grid information from connectivity file");
     .            .                      .                  .                      .                   .           		grid.FromFile(strConnectivity);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// No connectivity file; check for latitude/longitude dimension
     .            .                      .                  .                      .                   .           	} else {
     .            .                      .                  .                      .                   .           		AnnounceStartBlock("No connectivity file specified");
     .            .                      .                  .                      .                   .           		Announce("Attempting to generate latitude-longitude grid from data file");
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Load in the benchmark file
     0            0                      0                  0                688,130 ( 0.01%)        125 ( 0.00%)  		NcFileVector vecNcFiles;
   121 ( 0.12%)   6 ( 0.83%)       694,056 ( 0.01%)       265 ( 0.00%)         9,669 ( 0.00%)        195 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[0]);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		_ASSERT(vecNcFiles.size() > 0);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		if (vecNcFiles.size() < 1) {
     .            .                      .                  .                      .                   .           			_EXCEPTIONT("No data files specified; unable to generate grid");
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     0            0             78,923,834 ( 1.69%) 3,114,745 ( 4.57%)    12,477,562 ( 0.27%)  2,076,496 ( 3.05%)  		grid.GenerateLatitudeLongitude(
     .            .                      .                  .                      .                   .           			vecNcFiles[0],
     .            .                      .                  .                      .                   .           			strLatitudeName,
     .            .                      .                  .                      .                   .           			strLongitudeName,
     .            .                      .                  .                      .                   .           			fRegional,
     .            .                      .                  .                      .                   .           			fDiagonalConnectivity);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		_ASSERT(grid.m_nGridDim.size() == 2);
     .            .                      .                  .                      .                   .           
-- line 2723 ----------------------------------------
-- line 2730 ----------------------------------------
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Get time dimension over all files
     .            .                      .                  .                      .                   .           	// strOutTimeUnits is either predetermined or set at the command line
     .            .                      .                  .                      .                   .           	AnnounceStartBlock("Concatenating times");
     .            .                      .                  .                      .                   .           	NcType nctypeTime;
     .            .                      .                  .                      .                   .           	std::vector< std::pair<int, int> > vecGlobalTimeIxToFileTimeIx;
     .            .                      .                  .                      .                   .           
     0            0                      0                  0                 10,592 ( 0.00%)          4 ( 0.00%)  	std::vector< std::vector<Time> > vecGlobalTimes;
     .            .                      .                  .                      .                   .           	vecGlobalTimes.resize(vecOutputFiles.size());
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	
     .            .                      .                  .                      .                   .           	#if defined(TEMPEST_MPIOMP)
     .            .                      .                  .                      .                   .           		//============================= Spread files across nodes=================================
     .            .                      .                  .                      .                   .           		// Note: if vecInputFiles.size() < total processor numbers, only <vecInputFiles.size()>
     .            .                      .                  .                      .                   .           		//   number of processor will be used.
     .            .                      .                  .                      .                   .           		// Calculate how many files each processor should process
-- line 2746 ----------------------------------------
-- line 2786 ----------------------------------------
     .            .                      .                  .                      .                   .           				} else {
     .            .                      .                  .                      .                   .           					// Create a new communicator with only at most vecInputFiles.size() size
     .            .                      .                  .                      .                   .           					valid_flag = 1;					
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			} else {
     .            .                      .                  .                      .                   .           				valid_flag = 1;		
     .            .                      .                  .                      .                   .           			}
 1,216 ( 1.21%)  10 ( 1.38%)         1,984 ( 0.00%)        24 ( 0.00%)           768 ( 0.00%)         12 ( 0.00%)  			MPI_Comm_split(MPI_COMM_WORLD, valid_flag, tempMPIRank, &MPI_REAL_COMM);
     .            .                      .                  .                      .                   .           			MPI_Comm_rank(MPI_REAL_COMM, &nMPIRank);	
     .            .                      .                  .                      .                   .           			MPI_Comm_size(MPI_REAL_COMM, &nMPISize);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		} else {
     .            .                      .                  .                      .                   .           			processorResponsibalForFile_LB = 0;
     .            .                      .                  .                      .                   .           			processorResponsibalForFile_UB = vecInputFiles.size();
     .            .                      .                  .                      .                   .           			MPI_Comm_rank(MPI_COMM_WORLD, &nMPIRank);	
     .            .                      .                  .                      .                   .           			MPI_Comm_size(MPI_COMM_WORLD, &nMPISize);
-- line 2802 ----------------------------------------
-- line 2809 ----------------------------------------
     .            .                      .                  .                      .                   .           		#if defined(TEMPEST_MPIOMP)
     .            .                      .                  .                      .                   .           			if ((f >= processorResponsibalForFile_UB) || f < processorResponsibalForFile_LB) {
     .            .                      .                  .                      .                   .           				continue;
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		#endif 
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Load in the time variable from all files
     .            .                      .                  .                      .                   .           		NcFileVector vecNcFiles;//also known as the local vecNcFiles when MPI is enabled.
   363 ( 0.36%)  18 ( 2.48%)     2,080,272 ( 0.04%)       734 ( 0.00%)        27,948 ( 0.00%)        554 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[f]);
     .            .                      .                  .                      .                   .           		_ASSERT(vecNcFiles.size() > 0);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Get the time variable
     0            0                     66 ( 0.00%)         6 ( 0.00%)            66 ( 0.00%)          6 ( 0.00%)  		NcVar * varTime = NcGetTimeVariable(*(vecNcFiles[0]));
     .            .                      .                  .                      .                   .           		if (varTime == NULL) {
     .            .                      .                  .                      .                   .           			_EXCEPTION1("File \"%s\" does not contain \"time\" variable",
     .            .                      .                  .                      .                   .           				vecNcFiles.GetFilename(0).c_str());
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		nctypeTime = varTime->type();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Get time units (if not specified on command line)
     .            .                      .                  .                      .                   .           		if (strOutTimeUnits == "") {
    38 ( 0.04%)   2 ( 0.28%)            65 ( 0.00%)         4 ( 0.00%)            27 ( 0.00%)          2 ( 0.00%)  			NcAtt * attTime = varTime->get_att("units");
     .            .                      .                  .                      .                   .           			if (attTime == NULL) {
     .            .                      .                  .                      .                   .           				_EXCEPTION1("File \"%s\" missing \"time:units\" attribute",
     .            .                      .                  .                      .                   .           					vecNcFiles.GetFilename(0).c_str());
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
    32 ( 0.03%)   1 ( 0.14%)           176 ( 0.00%)         9 ( 0.00%)           156 ( 0.00%)         10 ( 0.00%)  			strOutTimeUnits = attTime->as_string(0);
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Load in CF-compliant time data
     .            .                      .                  .                      .                   .           		const NcTimeDimension & vecTimes = vecNcFiles.GetNcTimeDimension(0);
     .            .                      .                  .                      .                   .           		if (vecTimes.size() == 0) {
     .            .                      .                  .                      .                   .           			_EXCEPTION1("WARNING: File group does not contain any time data (%s)",
     .            .                      .                  .                      .                   .           				vecInputFiles[f].c_str());
     .            .                      .                  .                      .                   .           		}
-- line 2845 ----------------------------------------
-- line 2877 ----------------------------------------
     .            .                      .                  .                      .                   .           	///////////////////////////////////////////////////////////////////////////
     .            .                      .                  .                      .                   .           	// Build the set of nodes at each time contained in each blob
     .            .                      .                  .                      .                   .           	///////////////////////////////////////////////////////////////////////////
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Build blobs at each time level
     .            .                      .                  .                      .                   .           	AnnounceStartBlock("Building blob set at each time level");
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Set of nodes at each time contained in each blob
     0            0                      0                  0            227,417,112 ( 4.87%)  5,682,708 ( 8.34%)  	std::vector< std::vector<IndicatorSet> > vecAllBlobs;//Sending and Receiving Blobs to nearby processors [Halo Var]
     .            .                      .                  .                      .                   .           	vecAllBlobs.resize(nGlobalTimes);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Bounding boxes at each time for each blob
     0            0                      0                  0                124,464 ( 0.00%)        371 ( 0.00%)  	std::vector< std::vector< LatLonBox<double> > > vecAllBlobBoxesDeg;//[Halo Var]
     .            .                      .                  .                      .                   .           	vecAllBlobBoxesDeg.resize(nGlobalTimes);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Time index across all files
     .            .                      .                  .                      .                   .           	int iTime = 0;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Loop through all files
     .            .                      .                  .                      .                   .           	int startIndx = 0;//The starting index for looping through all files
     .            .                      .                  .                      .                   .           	#if defined(TEMPEST_MPIOMP) 
-- line 2897 ----------------------------------------
-- line 2900 ----------------------------------------
     .            .                      .                  .                      .                   .           		nFiles = processorResponsibalForFile_UB;		
     .            .                      .                  .                      .                   .           	#endif 
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	for (int f = startIndx; f < nFiles; f++) {
     .            .                      .                  .                      .                   .           		// Clear existing data in the register
     .            .                      .                  .                      .                   .           		varreg.UnloadAllGridData();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Load in the benchmark file
     0            0                      0                  0              2,064,390 ( 0.04%)        375 ( 0.00%)  		NcFileVector vecNcFiles;
   363 ( 0.36%)  18 ( 2.48%)     2,080,272 ( 0.04%)       734 ( 0.00%)        27,948 ( 0.00%)        554 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[f]);
     .            .                      .                  .                      .                   .           		_ASSERT(vecNcFiles.size() > 0);
     .            .                      .                  .                      .                   .           		
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Number of times in this input file
     0            0                     66 ( 0.00%)         6 ( 0.00%)            66 ( 0.00%)          6 ( 0.00%)  		NcDim * dimTimeInput = vecNcFiles[0]->get_dim("time");
     .            .                      .                  .                      .                   .           		if (dimTimeInput == NULL) {
     .            .                      .                  .                      .                   .           			_EXCEPTION1("No dimension \"time\" in file \"%s\"",
     .            .                      .                  .                      .                   .           				vecNcFiles.GetFilename(0).c_str());
     .            .                      .                  .                      .                   .           		}
     0            0                    288 ( 0.00%)        24 ( 0.00%)         7,200 ( 0.00%)         48 ( 0.00%)  		int nLocalTimes = dimTimeInput->size();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Loop through all times
     .            .                      .                  .                      .                   .           		for (int t = 0; t < nLocalTimes; t++, iTime++) {
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Get the current patch vector
     .            .                      .                  .                      .                   .           			std::vector<IndicatorSet> & vecBlobs = vecAllBlobs[iTime];
     .            .                      .                  .                      .                   .           			
     .            .                      .                  .                      .                   .           
-- line 2928 ----------------------------------------
-- line 2939 ----------------------------------------
     .            .                      .                  .                      .                   .           			// New announcement block for timestep
     .            .                      .                  .                      .                   .           			if (vecGlobalTimes.size() == 1) {
     .            .                      .                  .                      .                   .           				_ASSERT((iTime >= 0) && (iTime < vecGlobalTimes[0].size()));
     .            .                      .                  .                      .                   .           				AnnounceStartBlock("Time %i (%s)", iTime, 
     .            .                      .                  .                      .                   .           					vecGlobalTimes[0][iTime].ToString().c_str());
     .            .                      .                  .                      .                   .           			} else {
     .            .                      .                  .                      .                   .           				_ASSERT((t >= 0) && (t < vecGlobalTimes[f].size()));//allow t = vecGlobalTimes[f].size())
     .            .                      .                  .                      .                   .           				AnnounceStartBlock("Time %i (%s)", iTime,
     0            0                  7,360 ( 0.00%)       368 ( 0.00%)             0                   0           					vecGlobalTimes[f][t].ToString().c_str());
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Load the search variable data
     .            .                      .                  .                      .                   .           			Variable & var = varreg.Get(varix);
     .            .                      .                  .                      .                   .           			vecNcFiles.SetConstantTimeIx(t);
     0            0          1,910,710,944 (40.88%)    18,769 ( 0.03%) 1,906,762,848 (40.79%)     18,399 ( 0.03%)  			var.LoadGridData(varreg, vecNcFiles, grid);
     .            .                      .                  .                      .                   .           			const DataArray1D<float> & dataIndicator = var.GetData();
     .            .                      .                  .                      .                   .           /*
     .            .                      .                  .                      .                   .           			float dChecksum = 0.0;
     .            .                      .                  .                      .                   .           			for (int i = 0; i < dataState.GetRows(); i++) {
     .            .                      .                  .                      .                   .           				dChecksum += dataState[i];
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           			std::cout << dChecksum << std::endl;
     .            .                      .                  .                      .                   .           */
-- line 2961 ----------------------------------------
-- line 3324 ----------------------------------------
     .            .                      .                  .                      .                   .           	///////////////////////////////////////////////////////////////////////////
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	AnnounceStartBlock("Assign local tags to each blob");
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Tags for each blob at each time slice
     0            0                      0                  0                 37,512 ( 0.00%)        369 ( 0.00%)  	std::vector< std::vector<Tag> > vecAllBlobTags;
     .            .                      .                  .                      .                   .           	vecAllBlobTags.resize(nGlobalTimes);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Next available patch tag
     .            .                      .                  .                      .                   .           	Tag tagNextBlob(1, 0);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	// Give blob tags to the initial set of blobs
     .            .                      .                  .                      .                   .           	std::set<Tag> setAllTags;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	for (int t = 0; t < nGlobalTimes; t++) {
     0            0                 28,680 ( 0.00%)       368 ( 0.00%)             0                   0           		vecAllBlobTags[t].resize(vecAllBlobs[t].size());
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		tagNextBlob.id = 0;
     .            .                      .                  .                      .                   .           		for (int p = 0; p < vecAllBlobTags[t].size(); p++) {
     .            .                      .                  .                      .                   .           			vecAllBlobTags[t][p] = tagNextBlob;
     .            .                      .                  .                      .                   .           			setAllTags.insert(tagNextBlob);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			tagNextBlob.id++;
     .            .                      .                  .                      .                   .           		}
-- line 3350 ----------------------------------------
-- line 3354 ----------------------------------------
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	//================================Actual Parallization Starts===================================
     .            .                      .                  .                      .                   .           	//1. Exchang the vecAllBlobs; vecAllBlobTags; vecPrevBlobBoxesDeg; vecGlobalTimes
     .            .                      .                  .                      .                   .           	//==============================================================================================
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           #if defined(TEMPEST_MPIOMP)
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	//We still need the original unexchanged data for these two variables later
     0            0                      0                  0                 28,176 ( 0.00%)         12 ( 0.00%)  	GlobalTimesExchangeOp MPI_exchangedGlobalTimes(MPI_REAL_COMM,vecGlobalTimes, processorResponsibalForFile_LB, processorResponsibalForFile_UB);//Declare here since it needs to be reverted later
     0            0                 38,028 ( 0.00%)       378 ( 0.00%)        76,172 ( 0.00%)        755 ( 0.00%)  	TagExchangeOP MPI_exchangedTags(MPI_REAL_COMM, vecAllBlobTags);
     0            0                      0                  0            458,405,144 ( 9.81%) 11,449,717 (16.81%)  	BlobsExchangeOp MPI_exchangedBlobs(MPI_REAL_COMM, vecAllBlobs);
     .            .                      .                  .                      .                   .           	if (nMPISize > 1 && valid_flag) {
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		//Exchange vecGlobalTimes (will be reverted after the connectivity graph is built)		
     0            0                    132 ( 0.00%)         7 ( 0.00%)            80 ( 0.00%)          4 ( 0.00%)  		MPI_exchangedGlobalTimes.StartExchange();
     0            0                 24,256 ( 0.00%)         6 ( 0.00%)         6,832 ( 0.00%)          2 ( 0.00%)  		MPI_exchangedGlobalTimes.EndExchange();
     .            .                      .                  .                      .                   .           		vecGlobalTimes = MPI_exchangedGlobalTimes.GetExchangedVecGlobalTimes();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		//Exchange vecAllBlobTags			
     0            0                    620 ( 0.00%)        13 ( 0.00%)           256 ( 0.00%)          8 ( 0.00%)  		MPI_exchangedTags.StartExchange();
     0            0                 37,776 ( 0.00%)       371 ( 0.00%)             0                   0           		MPI_exchangedTags.EndExchange();
     .            .                      .                  .                      .                   .           		vecAllBlobTags = MPI_exchangedTags.GetExchangedVecAllBlobTags();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		//Exchange vecAllBlobs
     0            0                205,936 ( 0.00%)        15 ( 0.00%)           152 ( 0.00%)          6 ( 0.00%)  		MPI_exchangedBlobs.StartExchange();
     0            0            211,843,848 ( 4.53%) 5,293,512 ( 7.77%)     1,687,320 ( 0.04%)     42,155 ( 0.06%)  		MPI_exchangedBlobs.EndExchange();
     .            .                      .                  .                      .                   .           		vecAllBlobs = MPI_exchangedBlobs.GetExchangedVecAllBlobs();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		//Exchange vecPrevBlobBoxesDeg
     0            0                123,648 ( 0.00%)       371 ( 0.00%)       137,664 ( 0.00%)        378 ( 0.00%)  		BlobBoxesDegExchangeOP MPI_exchangedBlobBoxesDeg(MPI_REAL_COMM, vecAllBlobBoxesDeg);
     0            0                  2,876 ( 0.00%)        11 ( 0.00%)           888 ( 0.00%)          4 ( 0.00%)  		MPI_exchangedBlobBoxesDeg.StartExchange();
     0            0                 24,552 ( 0.00%)        10 ( 0.00%)        12,264 ( 0.00%)          9 ( 0.00%)  		MPI_exchangedBlobBoxesDeg.EndExchange();
     .            .                      .                  .                      .                   .           		vecAllBlobBoxesDeg = MPI_exchangedBlobBoxesDeg.GetExchangedVecAllBlobBoxesDeg();
     .            .                      .                  .                      .                   .           		
     .            .                      .                  .                      .                   .           		//Make sure all processors finish the exchange
   376 ( 0.37%)   6 ( 0.83%)         1,845 ( 0.00%)        24 ( 0.00%)         1,469 ( 0.00%)         18 ( 0.00%)  		MPI_Barrier(MPI_REAL_COMM);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           #endif
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	MapGraph multimapTagGraph;
     .            .                      .                  .                      .                   .           
-- line 3397 ----------------------------------------
-- line 3433 ----------------------------------------
     .            .                      .                  .                      .                   .           					_ASSERT(iFileLocal < processorResponsibalForFile_UB);
     .            .                      .                  .                      .                   .           				#else
     .            .                      .                  .                      .                   .           					_ASSERT(iFileLocal < vecGlobalTimes.size());
     .            .                      .                  .                      .                   .           				#endif
     .            .                      .                  .                      .                   .           				
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           			_ASSERT(iTimeLocal < vecGlobalTimes[iFileLocal].size());
     .            .                      .                  .                      .                   .           			Announce("Time %i (%s)", t,
     0            0                  7,380 ( 0.00%)       369 ( 0.00%)             0                   0           				vecGlobalTimes[iFileLocal][iTimeLocal].ToString().c_str());
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Get the current blob vector
     .            .                      .                  .                      .                   .           		const std::vector<Tag> & vecPrevBlobTags = vecAllBlobTags[t-1];
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		std::vector<Tag> & vecBlobTags = vecAllBlobTags[t];
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		const std::vector<IndicatorSet> & vecPrevBlobs = vecAllBlobs[t-1];
-- line 3449 ----------------------------------------
-- line 3588 ----------------------------------------
     .            .                      .                  .                      .                   .           	AnnounceEndBlock("Done");
     .            .                      .                  .                      .                   .           	
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           	
     .            .                      .                  .                      .                   .           	#if defined(TEMPEST_MPIOMP)
     .            .                      .                  .                      .                   .           		if (nMPISize > 1 && valid_flag) {
     .            .                      .                  .                      .                   .           			//Gather the connectivity graph (multimapTagGraph) to P0
     0            0                      0                  0                590,000 ( 0.01%)      3,515 ( 0.01%)  			MapGraphGatherOp MPI_MapGraph(MPI_REAL_COMM,multimapTagGraph);
     0            0                889,944 ( 0.02%)        16 ( 0.00%)       496,728 ( 0.01%)         15 ( 0.00%)  			MPI_MapGraph.Gather();
     .            .                      .                  .                      .                   .           			if (nMPIRank == 0){
     .            .                      .                  .                      .                   .           				multimapTagGraph = MPI_MapGraph.GetGatheredTagGraph();
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			//Gather the setAllTags to P0
     0            0                 37,728 ( 0.00%)       374 ( 0.00%)       177,640 ( 0.00%)        745 ( 0.00%)  			TagCollectiveOP MPI_TagsGather(MPI_REAL_COMM, MPI_exchangedTags.GetOriginalVecAllBlobTags());
     0            0                236,528 ( 0.01%)        29 ( 0.00%)       134,124 ( 0.00%)         26 ( 0.00%)  			MPI_TagsGather.Gather();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			//And then reduced the original global time to P0 for next step:
     .            .                      .                  .                      .                   .           			int reducedNGlobalTimes = 0;
     0            0                      8 ( 0.00%)         2 ( 0.00%)            12 ( 0.00%)          3 ( 0.00%)  			MPI_Reduce(&original_nGlobalTimes, &reducedNGlobalTimes, 1, MPI_INT, MPI_SUM, 0, MPI_REAL_COMM);
     .            .                      .                  .                      .                   .           			if (nMPIRank == 0) {
     .            .                      .                  .                      .                   .           				nGlobalTimes = reducedNGlobalTimes;
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			MPI_Barrier(MPI_REAL_COMM);
     .            .                      .                  .                      .                   .           			if (nMPIRank == 0){
     .            .                      .                  .                      .                   .           				setAllTags = MPI_TagsGather.GetGatheredSetAllTags();
     .            .                      .                  .                      .                   .           				vecAllBlobTags = MPI_TagsGather.GetUnserialVecAllTags(1);
-- line 3617 ----------------------------------------
-- line 3901 ----------------------------------------
     .            .                      .                  .                      .                   .           			if (nMPISize > 1 && valid_flag) {
     .            .                      .                  .                      .                   .           				// Revert the exchanged vecGlobalTimes and nGlobalTimes for output:
     .            .                      .                  .                      .                   .           				vecGlobalTimes = MPI_exchangedGlobalTimes.GetUnExchangedVecGlobalTimes();
     .            .                      .                  .                      .                   .           				nGlobalTimes = original_nGlobalTimes;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				//The vecAllBlobTags on processor 0 need to be scatter. And it only has valid meaning on P0 for this constructor.
     0            0                 37,992 ( 0.00%)       376 ( 0.00%)       143,428 ( 0.00%)        991 ( 0.00%)  				TagCollectiveOP MPI_TagScatter(MPI_REAL_COMM, vecAllBlobTags);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				// Then every processor will gather their original
     .            .                      .                  .                      .                   .           				//  vecAllGlobsTags information to P0
     .            .                      .                  .                      .                   .           				// Calling the GatherTagCounts() will update the _vecAlllBlobTags
     .            .                      .                  .                      .                   .           				//  inside the TagCollectiveOP to the input one for all processors
     .            .                      .                  .                      .                   .           				//  except P0
     0            0                 38,680 ( 0.00%)       489 ( 0.00%)        74,636 ( 0.00%)        858 ( 0.00%)  				MPI_TagScatter.GatherTagCounts(MPI_exchangedTags.GetOriginalVecAllBlobTags());
     .            .                      .                  .                      .                   .           				// Make sure all the gather process is finished
     .            .                      .                  .                      .                   .           				MPI_Barrier(MPI_REAL_COMM);
     0            0                102,384 ( 0.00%)        23 ( 0.00%)        51,184 ( 0.00%)         21 ( 0.00%)  				MPI_TagScatter.Scatter();
     .            .                      .                  .                      .                   .           				MPI_Barrier(MPI_REAL_COMM);
     0            0                172,728 ( 0.00%)     2,478 ( 0.00%)        81,816 ( 0.00%)      1,481 ( 0.00%)  				vecAllBlobTags = MPI_TagScatter.GetUnserialVecAllTags(0);
     .            .                      .                  .                      .                   .           				vecAllBlobs = MPI_exchangedBlobs.GetOriginalVecAllBlobs();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           		#endif
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Load in the benchmark file
     0            0                      0                  0                688,130 ( 0.01%)        125 ( 0.00%)  		NcFileVector vecNcFiles;
   121 ( 0.12%)   6 ( 0.83%)       693,456 ( 0.01%)       246 ( 0.00%)         9,348 ( 0.00%)        186 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[0]);
     .            .                      .                  .                      .                   .           		_ASSERT(vecNcFiles.size() > 0);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		// Loop through all output files
     .            .                      .                  .                      .                   .           		_ASSERT(vecOutputFiles.size() == vecGlobalTimes.size());
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		int iGlobalTimeIx = 0;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		for (int f = 0; f < vecOutputFiles.size(); f++) {
-- line 3937 ----------------------------------------
-- line 3945 ----------------------------------------
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			#endif //[Commented out for auto-complete, need to uncomment later]
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			Announce("Writing file \"%s\"", vecOutputFiles[f].c_str());
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Open output file
     0            0                360,252 ( 0.01%)       209 ( 0.00%)         3,066 ( 0.00%)         45 ( 0.00%)  			NcFile ncOutput(vecOutputFiles[f].c_str(), NcFile::Replace);
     .            .                      .                  .                      .                   .           			if (!ncOutput.is_valid()) {
     .            .                      .                  .                      .                   .           				_EXCEPTION1("Unable to open output file \"%s\"",
     .            .                      .                  .                      .                   .           					vecOutputFiles[f].c_str());
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Output time dimension
     .            .                      .                  .                      .                   .           			int nLocalTimes = vecGlobalTimes[f].size();
     .            .                      .                  .                      .                   .           
     0            0                    543 ( 0.00%)        27 ( 0.00%)            66 ( 0.00%)          6 ( 0.00%)  			NcDim * dimOutputTime = ncOutput.add_dim("time", nLocalTimes);
     .            .                      .                  .                      .                   .           			if (dimOutputTime == NULL) {
     .            .                      .                  .                      .                   .           				_EXCEPTIONT("Unable to create dimension \"time\" in output");
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           			NcVar * varOutputTime =
     0            0                 67,416 ( 0.00%)        66 ( 0.00%)            66 ( 0.00%)          6 ( 0.00%)  				ncOutput.add_var("time", ncDouble, dimOutputTime);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			DataArray1D<double> dOutputTimes(nLocalTimes);
     .            .                      .                  .                      .                   .           			for (int t = 0; t < vecGlobalTimes[f].size(); t++) {
     .            .                      .                  .                      .                   .           				dOutputTimes[t] =
     0            0                  7,360 ( 0.00%)       368 ( 0.00%)         7,360 ( 0.00%)        368 ( 0.00%)  					vecGlobalTimes[f][t].GetCFCompliantUnitsOffsetDouble(strOutTimeUnits);
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
     0            0                    429 ( 0.00%)        21 ( 0.00%)           141 ( 0.00%)          6 ( 0.00%)  			varOutputTime->add_att("long_name","time");
     0            0                    426 ( 0.00%)        21 ( 0.00%)            81 ( 0.00%)          6 ( 0.00%)  			varOutputTime->add_att("units",strOutTimeUnits.c_str());
     0            0                    423 ( 0.00%)        21 ( 0.00%)           126 ( 0.00%)          6 ( 0.00%)  			varOutputTime->add_att("calendar",vecGlobalTimes[f][0].GetCalendarName().c_str());
     .            .                      .                  .                      .                   .           
     0            0                     72 ( 0.00%)        12 ( 0.00%)         1,800 ( 0.00%)         15 ( 0.00%)  			varOutputTime->put(&(dOutputTimes[0]), nLocalTimes);
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Create output variable
     .            .                      .                  .                      .                   .           			NcDim * dimOut0 = NULL;
     .            .                      .                  .                      .                   .           			NcDim * dimOut1 = NULL;
     .            .                      .                  .                      .                   .           			NcVar * varTagOut = NULL;
     .            .                      .                  .                      .                   .           
   864 ( 0.86%)  42 ( 5.79%)       260,931 ( 0.01%)       516 ( 0.00%)        56,286 ( 0.00%)        324 ( 0.00%)  			PrepareBlobOutputVar(
     .            .                      .                  .                      .                   .           				*(vecNcFiles[0]),
     .            .                      .                  .                      .                   .           				ncOutput,
     .            .                      .                  .                      .                   .           				vecOutputFiles[f],
     .            .                      .                  .                      .                   .           				grid,
     .            .                      .                  .                      .                   .           				strOutputVariable,
     .            .                      .                  .                      .                   .           				strLatitudeName,
     .            .                      .                  .                      .                   .           				strLongitudeName,
     .            .                      .                  .                      .                   .           				ncInt,
-- line 3994 ----------------------------------------
-- line 4046 ----------------------------------------
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           				// Write to file
     .            .                      .                  .                      .                   .           				if (grid.DimCount() == 1) {
     .            .                      .                  .                      .                   .           					varTagOut->set_cur(t, 0);
     .            .                      .                  .                      .                   .           					varTagOut->put(&(dataBlobTag[0]), 1, nDimOutSize0);
     .            .                      .                  .                      .                   .           				} else {
     .            .                      .                  .                      .                   .           					varTagOut->set_cur(t, 0);
     0            0                  9,544 ( 0.00%)     1,495 ( 0.00%)       218,324 ( 0.00%)      1,487 ( 0.00%)  					varTagOut->put(&(dataBlobTag[0]), 1, nDimOutSize0, nDimOutSize1);
     .            .                      .                  .                      .                   .           				}
     .            .                      .                  .                      .                   .           			}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Update global time index
     .            .                      .                  .                      .                   .           			iGlobalTimeIx += nLocalTimes;
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           			// Close the output file
     0            0                      0                  0                630,798 ( 0.01%)        579 ( 0.00%)  			ncOutput.close();
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		}
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           		AnnounceEndBlock("Done");
     .            .                      .                  .                      .                   .           	}
     .            .                      .                  .                      .                   .           /*
     .            .                      .                  .                      .                   .           	// Copy variable attributes from first input file
     .            .                      .                  .                      .                   .           	{
-- line 4070 ----------------------------------------
-- line 4138 ----------------------------------------
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           #if defined(TEMPEST_MPIOMP)
     .            .                      .                  .                      .                   .           	MPI_Abort(MPI_COMM_WORLD, 1);
     .            .                      .                  .                      .                   .           #endif
     .            .                      .                  .                      .                   .           }
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           #if defined(TEMPEST_MPIOMP)
     .            .                      .                  .                      .                   .           	// Deinitialize MPI
     0            0                      0                  0              1,611,444 ( 0.03%)         55 ( 0.00%)  	MPI_Finalize();
     .            .                      .                  .                      .                   .           #endif
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           }
     .            .                      .                  .                      .                   .           
     .            .                      .                  .                      .                   .           ///////////////////////////////////////////////////////////////////////////////

--------------------------------------------------------------------------------
curB             curBk        totB                   totBk               totFdB                 totFdBk             
--------------------------------------------------------------------------------
100,773 (100.0%) 723 (99.72%) 3,125,146,938 (66.86%) 31,257,440 (45.88%) 2,685,675,791 (57.46%) 20,322,753 (29.83%)  events annotated

